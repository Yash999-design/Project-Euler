"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""
def fib(max=10):
    a = 1
    b = 2
    while a < max:
        yield a
        a, b = b, a + b

for i in range(1, 501):
    print(i, ":", fib(i))
# print(sum(i for i in fib(10000000) if i % 2 == 0))
# This is the probably the most efficient solution


# another way of doing this is using functools module's lru_cache decorator 
# from functools import lru_cache #! LRU stands for Least recently used cache.

# @lru_cache(maxsize = 1000)  #! Default value is 128
# def fibonacci(n):
#     if n == 1:
#         return 1
#     elif n == 2:
#         return 1
#     elif n > 2:
#         return fibonacci(n-1) + fibonacci(n-2)
# for i in range(1, 501):
#     print(i, ":", fibonacci(i))
# Some other forms of fibonacci series 
# def fibonacci(n):

#     if n == 1 or n == 2:
#         return 1
    
#     else:
#         return fibonacci(n-1) + fibonacci(n-2)

# n = int(input("Enter the number : "))
# res = fibonacci(n)
# print(res)

# def fibonacciGen(n):
#     a = b = 1
#     yield a
#     yield b
#     while n > 2:
#         n -= 1
#         a, b = b, a+b
#         yield b

# for i in fibonacciGen(10):
#     print(i)